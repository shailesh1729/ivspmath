.. _Math_Algebra_overview:



Algebraic structures
===================================

Introduction
-------------------------

.. index:: algebra

An *algebra* is a set S (called the *carrier*) together with zero or more *operations*,
each of which is a function from :math:`S^k \rightarrow S` for some k. The value k
is the number of *arguments* to the operation and is called "arity" of the operation.
Typical operations are *unary* (one argument) or *binary* (two arguments). 

* *0-ary* operations: identity element, etc.. Also called constants
* *unary* operations: negation
* *binary* operations: addition, multiplication etc.

Various standard algebras are abstractions which allow us to reason about
different situations at the same time. They are like base classes
in an object oriented type hierarchy that provide minimum features common
to all classes that inherit from them without specifying any details.

Our proofs and algorithms don't require the detailed
structure of say :math:`\mathbb{Q}`, :math:`\mathbb{R}`, or :math:`\mathbb{Z}`, but
in fact can work in any algebra of the appropriate type.

.. rubric:: Typical properties of operations

* Closure: :math:`x \in S \cap y \in S \Rightarrow x + y \in S`. 
* Associativity: :math:`x+(y+z) = (x+y)+z`
* Identity: :math:`0+x=x+0=x`
* Inverse: :math:`x+(-x)=(-x)+x=0`
* Commutativity: :math:`x+y=y+x`
* Distributivity: :math:`x(y+z)=xy+xz; (y+z)x = yx+zx`
* Multiplicative Associativity : :math:`(xy)z = x(yz)`
* Multiplicative Identity: :math:`1x = x1 = x`
* Multiplicative Commutativity: :math:`xy=yx`
* Multiplicative Inverse : :math:`xx^{-1}=x^{-1}x=1`

.. ::

    See http://www.ffnn.nl/pages/articles/media/uml-diagrams-using-graphviz-dot.php
    for detailed discussion on this class diagram.
    http://www.lunatech-research.fr/archives/2007/04/27/uml-class-diagrams-confluence-using-graphviz-and-dot
    
    
.. rubric:: Hierarchy of algebraic structures

.. graphviz:: hierarchy.dot



Single binary operation algebraic structures
------------------------------------------------

Let S be a set and . be a binary operation defined
over it. 

.. index:: magma

Magma
'''''''''''''''

* S is closed under .

Magma is also known as groupoid at times. But category
theory gives a different interpretation to the term
groupoid.

Example: binary tree whose leaves are 
elements of some set A.


.. index:: semigroup

Semigroup
'''''''''''''''''''''''''''

* S is closed under .
* Operator . is associative.

Examples:

* Let A be a set, and S be a set of functions 
  from A to A. Then (S, .) is a semigroup,
  where . is the composition operation defined
  by :math:`(f . g)(x) = f(g(x))`.
* Let :math:`\mathbb{Z}^+` be the positive 
  integers. Then :math:`(\mathbb{Z}^+, +)` is
  a semigroup.

.. index:: monoid
  
Monoid
''''''''''''''''''''''''''''

A semigroup (S, .) is a *monoid* if it has
an identity element.
  
* :math:`e.x = x.e = x`

If there is an identity element, then it
is unique.

A semigroup can be turned into a monoid
by adding a new identity element (if it 
doesn't have one already).


.. index:: group
  
Group
'''''''''''''''''''''

A monoid (S,.) is a *group* if for each
a and b in S, there are solutions x and
y to the equations :math:`ax=b` and 
:math:`ya=b`.  This implies existence
of inverse. Also it can be shown that
left inverse and right inverse are equal.


.. rubric:: Examples

* Let :math:`S={x}` and let :math:`x*x=x`.
  Then :math:`(S,*)` is a group with identity
  x and :math:`x^{-1}=x`.
* :math:`\mathbb{Q}`, 
  :math:`\mathbb{R}`, and :math:`\mathbb{Z}`
  are groups with the binary operation +, but
  not with the binary operation :math:`*`.

.. index:: group;abelian
  
Abelian Group
''''''''''''''''''''''''

If a group is *commutative* which means that
:math:`xy=yx \forall x,y \in S`, then it is an
abelian group.  
  

Operations on algebras
-----------------------------

.. index:: subalgebra

Subalgebras
'''''''''''''''''''''''''''

A subalgebra of an algebra A is obtained by
taking a subset S' of the carrier that is
closed under all operations of the algebra.
Any axioms satisfied by the parent algebra
are inherited by its subalgebras.

A *subalgebra generated by* a particular element
or a set of elements is the the smallest algebra
of a given algebra that includes the specified 
elements. These elements are called *generators*.

.. index:: homomorphism

Homomorphism
''''''''''''''''''''

A function from the carrier of A to the carrier of
B is a *homomorphism* written :math:`f:A\rightarrow B`,
if for any n-ary operation g, 
:math:`g(f(x_1), ..., f(x_n)) = f(g(x_1, ..., x_n))`, where
g on the left side is B's version of g and g on the right
side is A's version of g. If the operation holds for
a particular operation g, then f is said to preserve g.
A homomorphism preserves all operations.


* *Image* of f is defined as :math:`f(A) = \{f(x) | x \in A\}`.
* Let :math:`f:A\rightarrow B` be an algebra homomorphism.
  Then f(A) is a subalgebra of B.

Two operation algebraic structures
-----------------------------------------

  
For more details see 

* [wikipediaOutlineAlgebraicStructures]_ 
* [PineWikiAlgebraicStructures]_.



.. rubric:: Change log

:Last Modified:    $Id: overview.rst 249 2012-08-05 06:17:57Z shailesh $
